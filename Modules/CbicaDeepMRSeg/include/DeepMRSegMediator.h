#ifndef DeepMRSegMediator_h
#define DeepMRSegMediator_h

// The following header file is generated by CMake and thus it's located in
// the build directory. It provides an export macro for classes and functions
// that you want to be part of the public interface of your module.
#include <MitkCbicaDeepMRSegExports.h>

#include <mitkImage.h>

#include <itkInvertIntensityImageFilter.h>

#include <usGetModuleContext.h>
#include <mitkIPythonService.h>
#include <usModuleContext.h>

namespace captk {
/** \class Example Inverter
 *  \brief Workshop Example Inverter Module API
 *  This is a simple module to show how modules can be invoked from plugins.
 *  This class acts as a wrapper for the ITK filter.
 */
class MITKCBICADEEPMRSEG_EXPORT DeepMRSegMediator
{
	/** \brief  This class is basically a filter wrapper, so
		 * we COULD inherit from mitk::ImageToImageFilter.
		 * While this would be better design, there is some code level overhead,
		 * and that would distract from the point of this example.
		 * So we'll keep it simpler (and hopefully clearer) by just using a
		 * few familiar functions.
		 */
public:
	DeepMRSegMediator();

	~DeepMRSegMediator() {}

	// ITK-filter-like functions
	void SetInput(mitk::Image::Pointer inImagePtr);
	void Update();
	mitk::Image::Pointer GetOutput();

	void RunSampleScript();

	// Utility functions for working with python
	bool IsOkayToRun();
	void PassArgsToPython(std::vector<std::string> args); // convenience function
	bool ChangeWorkingDirectory(std::string newWorkingDirectoryPath);

protected:
	mitk::Image::Pointer m_InputPtr;
	mitk::Image::Pointer m_LastOutput;

	us::ServiceReference<mitk::IPythonService> m_PythonServiceRef;
	mitk::IPythonService* m_PythonService;

	// path to our located python files
	std::string pythonFilesDirPath;
	bool pythonFilesDirFound;


	void RegisterResourceDir(std::string resourceDirPath);
	void RegisterPackageDir(std::string packageDirPath);

	std::string LocatePythonFileDir();
};


}

#endif // ! DeepMRSegMediator_h
